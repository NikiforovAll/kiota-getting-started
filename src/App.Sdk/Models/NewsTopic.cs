// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace App.Sdk.Models {
    public class NewsTopic : IParsable {
        /// <summary>The additionalDataProperty property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public NewsTopic_additionalData? AdditionalDataProperty { get; set; }
#nullable restore
#else
        public NewsTopic_additionalData AdditionalDataProperty { get; set; }
#endif
        /// <summary>The alternateName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlternateName { get; private set; }
#nullable restore
#else
        public string AlternateName { get; private set; }
#endif
        /// <summary>The bingId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BingId { get; private set; }
#nullable restore
#else
        public string BingId { get; private set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; private set; }
#nullable restore
#else
        public string Description { get; private set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>The image property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ImageObject? Image { get; set; }
#nullable restore
#else
        public ImageObject Image { get; set; }
#endif
        /// <summary>The isBreakingNews property</summary>
        public bool? IsBreakingNews { get; private set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; private set; }
#nullable restore
#else
        public string Name { get; private set; }
#endif
        /// <summary>The newsSearchUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NewsSearchUrl { get; private set; }
#nullable restore
#else
        public string NewsSearchUrl { get; private set; }
#endif
        /// <summary>The query property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public App.Sdk.Models.Query? Query { get; set; }
#nullable restore
#else
        public App.Sdk.Models.Query Query { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; private set; }
#nullable restore
#else
        public string Url { get; private set; }
#endif
        /// <summary>The webSearchUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebSearchUrl { get; private set; }
#nullable restore
#else
        public string WebSearchUrl { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="NewsTopic"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static NewsTopic CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new NewsTopic();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"additionalData", n => { AdditionalDataProperty = n.GetObjectValue<NewsTopic_additionalData>(NewsTopic_additionalData.CreateFromDiscriminatorValue); } },
                {"alternateName", n => { AlternateName = n.GetStringValue(); } },
                {"bingId", n => { BingId = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"image", n => { Image = n.GetObjectValue<ImageObject>(ImageObject.CreateFromDiscriminatorValue); } },
                {"isBreakingNews", n => { IsBreakingNews = n.GetBoolValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"newsSearchUrl", n => { NewsSearchUrl = n.GetStringValue(); } },
                {"query", n => { Query = n.GetObjectValue<App.Sdk.Models.Query>(App.Sdk.Models.Query.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetStringValue(); } },
                {"url", n => { Url = n.GetStringValue(); } },
                {"webSearchUrl", n => { WebSearchUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<NewsTopic_additionalData>("additionalData", AdditionalDataProperty);
            writer.WriteObjectValue<ImageObject>("image", Image);
            writer.WriteObjectValue<App.Sdk.Models.Query>("query", Query);
            writer.WriteStringValue("type", Type);
        }
    }
}
