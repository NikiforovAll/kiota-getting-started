// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace App.Sdk.Models {
    public class TrendingTopics : IParsable {
        /// <summary>The additionalDataProperty property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TrendingTopics_additionalData? AdditionalDataProperty { get; set; }
#nullable restore
#else
        public TrendingTopics_additionalData AdditionalDataProperty { get; set; }
#endif
        /// <summary>The followUpQueries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Query>? FollowUpQueries { get; private set; }
#nullable restore
#else
        public List<Query> FollowUpQueries { get; private set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The value property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<NewsTopic>? Value { get; set; }
#nullable restore
#else
        public List<NewsTopic> Value { get; set; }
#endif
        /// <summary>The webSearchUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebSearchUrl { get; private set; }
#nullable restore
#else
        public string WebSearchUrl { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="TrendingTopics"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TrendingTopics CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TrendingTopics();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"additionalData", n => { AdditionalDataProperty = n.GetObjectValue<TrendingTopics_additionalData>(TrendingTopics_additionalData.CreateFromDiscriminatorValue); } },
                {"followUpQueries", n => { FollowUpQueries = n.GetCollectionOfObjectValues<Query>(Query.CreateFromDiscriminatorValue)?.ToList(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
                {"value", n => { Value = n.GetCollectionOfObjectValues<NewsTopic>(NewsTopic.CreateFromDiscriminatorValue)?.ToList(); } },
                {"webSearchUrl", n => { WebSearchUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<TrendingTopics_additionalData>("additionalData", AdditionalDataProperty);
            writer.WriteStringValue("type", Type);
            writer.WriteCollectionOfObjectValues<NewsTopic>("value", Value);
        }
    }
}
